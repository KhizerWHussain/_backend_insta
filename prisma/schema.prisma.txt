// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderType {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  ARCHIVE
  OTHER
}

model Media {
  id                   Int                   @id @default(autoincrement())
  name                 String
  extension            String
  type                 MediaType
  size                 Float?
  location             String?
  path                 String
  meta                 Json?                 @db.JsonB
  createdAt            DateTime              @default(now()) @db.Timestamptz()
  updatedAt            DateTime              @default(now()) @updatedAt @db.Timestamptz()
  deletedAt            DateTime?             @db.Timestamptz()
  creator                 User?                 @relation(fields: [creatorId], references: [id])
  creatorId    Int?   

  postMusic            Post[] @relation("PostMusic")

}

enum AccountPrivacyType {
  PUBLIC
  PRIVATE
}

model User {
  id             Int            @id @default(autoincrement()) 
  username       String         @unique                   
  email          String         @unique                   
  password       String                               
  firstName      String
  lastName       String
  fullName       String?      
  gender         GenderType?       
  bio            String?                              
  profile        Media?                              
  createdAt      DateTime       @default(now())           
  updatedAt      DateTime       @updatedAt     
  deletedAt      DateTime?      @db.Timestamptz()
  
  // Followers and Following relationships
  followers      User[]         @relation("followers", references: [id])
  following      User[]         @relation("following", references: [id])
  
  posts          Post[]         
  stories        Story[]       
  reels          Reel[]

  savedPosts     SavedPost[]   
  archivedPosts  Post[]         @relation("UserArchivedPosts", references: [id]) // Only archive own posts

  accountPrivacy AccountPrivacyType? @default(PUBLIC)

  // postTaggedOn   TaggedPost[]   
}

// model TaggedPost {
//   id          Int     @id @default(autoincrement())

//   taggedUserId      Int     // Reference to the user who is tagged
//   postId      Int     // Reference to the post in which the user is tagged

//   user        User    @relation(fields: [taggedUserId], references: [id])
//   post        Post    @relation(fields: [postId], references: [id])

//   @@unique([taggedUserId, postId]) // Ensure a user can be tagged in the same post only once
// }



model SavedPost {
  id          Int     @id @default(autoincrement())
  savedByUserId      Int     // Reference to the user who saved the post
  postId      Int     // Reference to the post that is saved

  user        User    @relation(fields: [savedByUserId], references: [id])
  post        Post    @relation(fields: [postId], references: [id])

  @@unique([savedByUserId, postId]) // Ensure a user can save the same post only once
}

model Story {
  id             Int            @id @default(autoincrement()) 
  content        String?          // Content of the story, e.g., text, image, video URL
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?      @db.Timestamptz()
  creatorId      Int            // Reference to the user who created the story
  creator        User           @relation(fields: [creatorId], references: [id])
  media Media
  privacyType AccountPrivacyType? @default(PUBLIC)
}

model Reel {
  id             Int            @id @default(autoincrement()) 
  content        String?          // Content of the reel, e.g., video URL
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?      @db.Timestamptz()
  creatorId      Int            // Reference to the user who created the reel
  creator        User           @relation(fields: [creatorId], references: [id])

  media Media
  privacyType AccountPrivacyType? @default(PUBLIC)
}

// Define a join table for followers and following relationships
model UserFollow {
  id             Int            @id @default(autoincrement())
  followerId     Int            // User who is following
  followingId    Int            // User who is being followed

  follower       User           @relation("followers", fields: [followerId], references: [id])
  following      User           @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) // Ensure a unique relationship
}

enum AudienceType {
  EVERYONE
  FRIENDS
}

enum PostPrivacyType {
  SAVED
  ARCHIVE
}


enum PostFeedType {
  ONFEED
  ARCHIVED
}

model Post {
  id          Int      @id @default(autoincrement()) 
  caption     String?
  createdAt   DateTime @default(now())           
  updatedAt   DateTime @updatedAt     
  deletedAt   DateTime? @db.Timestamptz()
  media   Media?
  poll        Poll[]
  location    String?
  // music       Media? 

  music       Media?   @relation("PostMusic", fields: [musicId], references: [id])
  musicId     Int?     // Foreign key for music media

  // tagPeople   User[]  @relation("PostTagPeople")
  audience    AudienceType?
  creator     User     @relation(fields: [creatorId], references: [id]) 
  creatorId   Int      
  privacyType PostPrivacyType?

  feedType PostFeedType? @default(ONFEED)
}


model Poll {
  id          Int      @id @default(autoincrement()) 
  createdAt   DateTime @default(now())           
  updatedAt   DateTime @updatedAt     
  deletedAt   DateTime? @db.Timestamptz()

  question    String
  options     String[]

  // Relationship to the Post that this poll belongs to
  post        Post     @relation("PollPost", fields: [postId], references: [id])  // Optional: you can name it uniquely
  postId      Int      // Add postId field to reference the Post model

  // Relationship to the User who created this poll
  creator     User     @relation(fields: [creatorId], references: [id]) 
  creatorId   Int
}
