generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeviceType {
  WEB
  ANDROID
  IOS
}

enum UserType {
  USER
  ADMIN
}

enum GenderType {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  ARCHIVE
  OTHER
}

model Media {
  id        Int       @id @default(autoincrement())
  name      String
  extension String
  type      MediaType
  size      Float?
  location  String?
  path      String
  meta      Json?     @db.JsonB
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

  creator   User?     @relation(fields: [creatorId], references: [id])
  creatorId Int?
  
  driveId String

  postMusic Post[] @relation("PostMusic")

  post   Post? @relation(fields: [postId], references: [id])
  postId Int?

  reel Reel? @relation(fields: [reelid], references: [id])
  reelid Int?

  story Story? @relation(fields: [storyId], references: [id])
  storyId Int?

  @@unique([creatorId])

  Reel Reel[] @relation("reelMusic")
  
  noteImage Notes[] @relation("noteImageMedia")
  
  noteMusic Notes[] @relation("noteMusic")
}

enum AccountPrivacyType {
  PUBLIC
  PRIVATE
}

model Device {
  id        Int       @id @default(autoincrement())
  userId    Int
  authToken String
  fcmToken  String?
  type      DeviceType @default(ANDROID)
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()
}

enum UserActiveStatus {
  ACTIVE
  DEACTIVATED
}


model WebLink {
  id        Int         @id @default(autoincrement())
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?   @db.Timestamptz()

  title String?
  url String?

  creator User?  @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId Int?  @unique
}


model Notes {
  id        Int         @id @default(autoincrement())
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?   @db.Timestamptz()

  noteImageMedia Media? @relation("noteImageMedia", fields: [noteImageMediaId], references: [id])
  noteImageMediaId Int?

  noteMusic Media?  @relation("noteMusic", fields: [noteMusicId], references: [id])
  noteMusicId Int?

  creator User?  @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId Int?  @unique
}


model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique
  email     String      @unique
  password  String
  firstName String
  lastName  String
  fullName  String?
  gender    GenderType?
  bio       String?

  profile       Media? 

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?   @db.Timestamptz()

  type UserType?

  // Followers and Following relationships
  followers UserFollow[] @relation("UserFollowers")
  following UserFollow[] @relation("UserFollowing")

  pronouns String?

  webLink WebLink?

  posts   Post[]
  stories Story[]
  reels   Reel[]

  savedPosts SavedPost[]
  likedPosts    likePost[]

  accountPrivacy AccountPrivacyType? @default(PUBLIC)

  polls Poll[] @relation("UserPolls")

  folders  savedPostFolder[]

  taggedPosts   TaggedPost[] @relation("UserTags")

  devices Device[]

  FollowRequests FollowRequest[] @relation("follow_requester")
  FollowRecieves FollowRequest[] @relation("follow_reciever")

  commentPost commentPost[]
  StoryView StoryView[]

  activeStatus UserActiveStatus? @default(ACTIVE)

  blockedUsers     BlockedUser[] @relation("blocker")

  blockedByUsers   BlockedUser[] @relation("beingBlocked")

  Notes Notes[]
}

model StoryView {
  id         Int      @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deletedAt DateTime? @db.Timestamptz()

  storyId    Int
  viewerId   Int

  viewedAt   DateTime @default(now())
  
  story      Story    @relation(fields: [storyId], references: [id])
  viewer     User     @relation(fields: [viewerId], references: [id])
}

model Story {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()

  creatorId Int
  creator   User      @relation(fields: [creatorId], references: [id])

  AudienceType AudienceType? @default(EVERYONE)
 
  collage Boolean?   @default(false)
  seenByCreator  Boolean?  @default(false)

  media   Media[]
  mediaType  MediaType

  caption String?

  seenBy StoryView[] 

  // @@unique([mediaId], name: "Unique_MediaId")
}

model Reel {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?           @db.Timestamptz()
  
  creatorId   Int 
  creator     User                @relation(fields: [creatorId], references: [id])

  seenByCreator  Boolean?

  media   Media[]

  music  Media? @relation("reelMusic", fields: [musicId], references: [id])
  musicId Int?

  caption String?

}

model UserFollow {
  id          Int @id @default(autoincrement())
  followerId  Int // User who is following
  followingId Int // User who is being followed

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  createdAt  DateTime  @default(now())
  deletedAt  DateTime? @db.Timestamptz()

  // @@unique([followerId, followingId]) // Ensure a unique relationship
}


enum AudienceType {
  EVERYONE
  FRIENDS
}

enum PostFeedType {
  ONFEED
  ARCHIVED
}

model Post {
  id        Int       @id @default(autoincrement())
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()

  media Media[]

  location    String?
  musicId     Int? // Foreign key for music media
  music       Media?           @relation("PostMusic", fields: [musicId], references: [id])
  audience    AudienceType?
  creator     User             @relation(fields: [creatorId], references: [id])
  creatorId   Int
  // privacyType PostPrivacyType?
  feedType    PostFeedType?    @default(ONFEED)

  likedByCreator  Boolean?

  poll Poll[] @relation("PollPost")

    taggedUsers   TaggedPost[] @relation("TaggedUsers")

    likes       likePost[]

  savedPosts SavedPost[] @relation("PostSavedPosts")

  comments commentPost[]
}

model SavedPost {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()

  savedByUserId Int // Reference to the user who saved the post
  savedByUser   User @relation(fields: [savedByUserId], references: [id])

  postId Int // Reference to the post that is saved
  post   Post @relation("PostSavedPosts", fields: [postId], references: [id])

  folder    savedPostFolder  @relation(fields: [folderId], references: [id])
  folderId  Int

  // @@unique([savedByUserId, postId]) // Ensure a user can save the same post only once

   // Unique constraint: a user can save the same post only once in a folder
    // @@unique([savedByUserId, postId, folderId])
}

model savedPostFolder {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()

  user       User         @relation(fields: [creatorId], references: [id])
  creatorId     Int
  savedPosts SavedPost[] 
}

model likePost {
  id        Int       @id @default(autoincrement())
  likeByUser      User      @relation(fields: [likedByUserId], references: [id])
  likedByUserId    Int 
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int 

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

}

model TaggedPost {
  id            Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

  post          Post      @relation("TaggedUsers", fields: [postId], references: [id])
  postId        Int

  taggedUser    User      @relation("UserTags", fields: [taggedUserId], references: [id])
  taggedUserId  Int

  @@unique([postId, taggedUserId]) // Ensure a user can only be tagged once per post
}

model commentPost {
  id              Int            @id @default(autoincrement())
  comment         String

  commentator            User           @relation(fields: [commentatorId], references: [id])
  commentatorId          Int // Foreign key referencing the associated User

  post            Post           @relation(fields: [postId], references: [id])
  postId          Int // Foreign key referencing the associated Post

  replies         commentPost[] @relation("Replies")
  parentComment   commentPost?  @relation("Replies", fields: [parentCommentId], references: [id])
  parentCommentId Int?

  createdAt       DateTime       @default(now()) @db.Timestamptz()
  updatedAt       DateTime       @default(now()) @updatedAt @db.Timestamptz()
  deletedAt       DateTime?      @db.Timestamptz()
  likedBy         Int[]          @default([]) 
}

enum RequestStatus {
  PENDING 
  ACCEPTED
  DECLINED    
}

model FollowRequest {
  id               Int       @id @default(autoincrement())
  requesterId      Int       
  receiverId       Int    

  status           RequestStatus @default(PENDING) 
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

  requester        User      @relation("follow_requester", fields: [requesterId], references: [id])
  receiver         User      @relation("follow_reciever", fields: [receiverId], references: [id])

  // @@unique([requesterId, receiverId]) // Ensures one request per user pair
}

model Poll {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()

  question String
  options  String[]

  postId Int // Add postId field to reference the Post model
  post   Post @relation("PollPost", fields: [postId], references: [id]) // Unique relation name

  pollCreatorId Int // Reference to the User who created this poll
  pollCreator   User @relation("UserPolls", fields: [pollCreatorId], references: [id])
}


model BlockedUser {
  id         Int      @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()

  blocker    User     @relation("blocker", fields: [blockerId], references: [id])
  blockerId  Int      // ID of the user who is blocking

  userBeingBlocked    User     @relation("beingBlocked", fields: [userBeingBlockedId], references: [id])
  userBeingBlockedId  Int      // ID of the user who is being blocked

  // @@unique([blockerId, userBeingBlockedId]) // Ensure that a user can block another user only once
}
